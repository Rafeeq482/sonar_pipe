name: Deploy SonarQube

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-south-1
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TERRAFORM_WORKSPACE: default
      TF_VAR_key_name: SNS

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Install jq + Ansible first (we'll use jq to parse Terraform output safely)
      - name: Install tools (jq, Ansible)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq ansible python3-psycopg2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.5
          terraform_wrapper: false   # <-- CRITICAL: no wrapper, no ::debug noise

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve

      - name: Capture EC2 Public IP (from Terraform JSON)
        id: get_ip
        working-directory: terraform
        run: |
          ip=$(terraform output -json | jq -r '.sonarqube_public_ip.value')
          echo "Terraform returned IP: $ip"
          if ! echo "$ip" | grep -Eq '^([0-9]{1,3}\.){3}[0-9]{1,3}$'; then
            echo "ERROR: Invalid IP from Terraform: '$ip'"
            exit 1
          fi
          # Export to job env
          echo "INSTANCE_IP=$ip" >> $GITHUB_ENV

      - name: Setup SSH key
        run: |
          echo "${{ secrets.NEWACC_PRIVATE_KEY }}" > SNS.pem
          chmod 600 SNS.pem

      - name: Wait for SSH to become ready
        run: |
          echo "Waiting for SSH on $INSTANCE_IP ..."
          for i in {1..24}; do
            if timeout 5 bash -lc "echo > /dev/tcp/$INSTANCE_IP/22" 2>/dev/null; then
              echo "Port 22 is open."
              break
            fi
            echo "Attempt $i/24: SSH not ready yet. Retrying in 10s..."
            sleep 10
          done
          # Final connectivity check using ssh
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 -i SNS.pem ubuntu@$INSTANCE_IP "echo 'SSH OK from runner'"

      - name: Run Ansible Playbook
        run: |
          echo "Running Ansible on $INSTANCE_IP"
          ansible-playbook -i "$INSTANCE_IP," --private-key SNS.pem --user ubuntu ansible/install-sonarqube.yml

      # If any step above fails, this step runs and destroys infra
      - name: Cleanup (destroy) on failure
        if: failure()
        working-directory: terraform
        run: |
          echo "Pipeline failed — destroying AWS resources..."
          terraform destroy -auto-approve

      # Also destroy if workflow is canceled
      - name: Cleanup (destroy) on cancel
        if: cancelled()
        working-directory: terraform
        run: |
          echo "Pipeline cancelled — destroying AWS resources..."
          terraform destroy -auto-approve
